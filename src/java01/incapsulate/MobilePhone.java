package java01.incapsulate;

import java_08.annot.NonNull;

import java.util.Objects;
import java.util.Random;
import java.util.UUID;

public class MobilePhone {
    private static final Random rnd = new Random();
    private static final int RANGE_ID = 10000;

    private final String mId;
    private final String mModel;
    private final String mBrand;
    private final String mColor;
    private final double mPrice;


    private MobilePhone(String id, String brand, String model, String color, double price) {
        this.mModel = model;
        this.mBrand = brand;
        this.mColor = color;
        this.mPrice = price;
        this.mId = id;
    }

    private MobilePhone(String brand, String model, String color, double price) {
        this(UUID.randomUUID().toString(), brand, model, color, price);
    }


    String getId() {
        return mId;
    }

    String getBrand() {
        return mBrand;
    }

    public String getModel() {
        return mModel;
    }

    public String getColor() {
        return mColor;
    }

    double getPrice() {
        return mPrice;
    }


// autogenerated by Java8
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof MobilePhone)) return false;
        MobilePhone that = (MobilePhone) o;
        return mId == that.mId &&
                Double.compare(that.mPrice, mPrice) == 0 &&
                Objects.equals(mModel, that.mModel) &&
                Objects.equals(mBrand, that.mBrand) &&
                Objects.equals(mColor, that.mColor);
    }

    @Override
    public int hashCode() {

        return Objects.hash(mId, mModel, mBrand, mColor, mPrice);
    }

    @Override
    public String toString() {
        return String.format("ID: %-8s Brand: %-8s Model: %-10s Color: %-8s Price: %-8.2f",
                mId, mBrand, mModel, mColor, mPrice);
    }

    private static <T> void checkForNull(T obj) {
        if (obj == null) {
            throw new NullPointerException();
        }
        if (obj instanceof Double && (Double) obj < 0) {
            throw new NullPointerException();
        }
        if (obj instanceof Integer && (Integer) obj < 0) {
            throw new NullPointerException();
        }
    }

    // NonNull with User Annotation and IDEA support
    static MobilePhone newInstance(String id, @NonNull String brand, String model, String color, double price) {
        validateParameters(id, brand, model, color, price);
        return new MobilePhone(id, brand, model, color, price);
    }

    static MobilePhone newInstance(String brand, String model, String color, double price) {
        validateParameters(brand, model, color, price);
        return new MobilePhone(brand, model, color, price);
    }

    // NonNull with standard Methods
    private static void validateParameters(String brand, String model, String color, double price) {
//  brand check  inactive and blocked by @NonNull
        Objects.requireNonNull(brand);                             // no message
        Objects.requireNonNull(model, () -> "No Model Message");  // supplier
        Objects.requireNonNull(color, "No Color data");   // string
        checkForNull(price);
    }

    // NonNull with custom Methods
    private static void validateParameters(String id, String brand, String model, String color, double price) {
        Objects.requireNonNull(id);
        validateParameters(brand, model, color, price);
    }
}
